const fs = require('fs')
const http = require('http')
const path = require('path')
const express = require('express')
const cookieParser = require('cookie-parser')
const bodyParser = require('body-parser')
const favicon = require('serve-favicon')
const compression = require('compression')
const serialize = require('serialize-javascript')
const axios = require('axios')
const cheerio = require('cheerio')
const iconv = require('iconv-lite')
const BufferHelper = require('bufferhelper')
const resolve = file => path.resolve(__dirname, file)

const cities = require('./city')

const isProd = process.env.NODE_ENV === 'production'
const serverInfo =
  `express/${require('express/package.json').version} ` +
  `vue-server-renderer/${require('vue-server-renderer/package.json').version}`

const app = express()
app.use(express.static(path.join(__dirname, 'public')))
app.set('views', resolve('./views'))
app.set('view engine', 'ejs')
app.use(cookieParser())
app.use(bodyParser.json())
app.use(bodyParser.urlencoded({ extended: false }))

let indexHTML // generated by html-webpack-plugin
let renderer  // created from the webpack-generated server bundle
if (isProd) {
  // in production: create server renderer and index HTML from real fs
  renderer = createRenderer(fs.readFileSync(resolve('./dist/server-bundle.js'), 'utf-8'))
  indexHTML = parseIndex(fs.readFileSync(resolve('./dist/index.html'), 'utf-8'))
} else {
  // in development: setup the dev server with watch and hot-reload,
  // and update renderer / index HTML on file change.
  require('./build/setup-dev-server')(app, {
    bundleUpdated: bundle => {
      renderer = createRenderer(bundle)
    },
    indexUpdated: index => {
      indexHTML = parseIndex(index)
    }
  })
}

function createRenderer (bundle) {
  // https://github.com/vuejs/vue/blob/dev/packages/vue-server-renderer/README.md#why-use-bundlerenderer
  return require('vue-server-renderer').createBundleRenderer(bundle, {
    cache: require('lru-cache')({
      max: 1000,
      maxAge: 1000 * 60 * 15
    })
  })
}

function parseIndex (template) {
  const contentMarker = '<!-- APP -->'
  const i = template.indexOf(contentMarker)
  return {
    head: template.slice(0, i),
    tail: template.slice(i + contentMarker.length)
  }
}

const serve = (path, cache) => express.static(resolve(path), {
  maxAge: cache && isProd ? 60 * 60 * 24 * 30 : 0
})

app.use(compression({ threshold: 0 }))
app.use(favicon('./public/logo-48.png'))
app.use('/service-worker.js', serve('./dist/service-worker.js'))
app.use('/manifest.json', serve('./manifest.json'))
app.use('/dist', serve('./dist'))
app.use('/public', serve('./public'))

// 请求列表页面
app.get('/city/:name', (req, response) => {
  let host = 'http://hongdou.gxnews.com.cn'
  const cityNames = Object.keys(cities)
  let { name } = req.params
  let { page } = req.query
  if(!cityNames.includes(name))
    name = 'nanning'
  else if(name === 'guilin') 
    host = 'http://hongdou.guilinhd.com'

  let url = require('url').parse(`${host}/${cities[name]}.html`)
  if(page) {
    url = require('url').parse(`${host}/${cities[name]}-${page}.html`)
  }
  
  http.get(url,function(res){
    let bufferHelper = new BufferHelper()

    res.on('data', function (chunk) {
      bufferHelper.concat(chunk);
    });

    res.on('end',function(){ 
      let html = iconv.decode(bufferHelper.toBuffer(),'GB2312')
      const $ = cheerio.load(html)
      let arr = []
      let topics = $('div.thread-row.openTitle > a')
      for(let i = 0; i < topics.length; i++) {
        const dateString = topics.eq(i).parent().prev().prev().prev().find('a').eq(1).text()
        const dateTime = new Date(dateString).getTime()
        const nowTime = new Date().getTime()
        const totalTime = (nowTime - dateTime) / 1000
        let lastReplyTime
        if(totalTime < 60) {
          lastReplyTime = '刚刚'
        } else if(totalTime < 3600) {
          lastReplyTime = parseInt(totalTime / 60) + '分钟前'
        } else if(totalTime < 3600 * 24) {
          lastReplyTime = parseInt(totalTime / 3600) + '小时前'
        } else {
          lastReplyTime = parseInt(totalTime / (3600 * 24)) + '天前'
        }
        arr.push({
          title: topics.eq(i).text(),
          url: '/topic/' + topics.eq(i).attr('href').split('.')[0].split('-')[1],
          author: topics.eq(i).parent().prev().find('a').eq(0).text(),
          lastReplyTime: lastReplyTime,
          comments: topics.eq(i).parent().prev().prev().text().split('/')[0]
        })
      }

      if(!page) {
        response.render('list', {data: arr})
      } else {
        response.json(arr)
      }
    })
  })
})

// 请求话题详情
app.get('/topic/:id', (req, response) => {
  const { id } = req.params
  const { page } = req.query
  let url = require('url').parse(`http://hongdou.gxnews.com.cn/viewthread-${id}.html`)
  if(page) {
    url = require('url').parse(`http://hongdou.gxnews.com.cn/viewthread-${id}-${page}.html`)
  }

  http.get(url, res => {
    let bufferHelper = new BufferHelper()
    res.on('data', chunk => {
      bufferHelper.concat(chunk)
    })
    let pageSize = 0 // 最大页数
    res.on('end', () => {
      let html = iconv.decode(bufferHelper.toBuffer(),'GB2312')
      const $ = cheerio.load(html)
      let arr = []
      let items = $('.posttable')
      pageSize = $('td.pagenav').eq(1).text().split('/')[1].split('页')[0]
      for(let i = 0; i < items.length; i++) {
        const avatarUrl = items.eq(i).find('.smallfont a img').attr('src')
        // const username = "开车上纽北"
        const username = items.eq(i).find('.smallfont a img').attr('alt').replace('的头像', '')
        const comefrom = items.eq(i).find('.comefrom').text().substring(3)
        const publishTime = items.eq(i).find('tr:last-child').find('td:last-child')
          .find('table').eq(0).find('td:last-child').text().match(/20\d{2}-\d{2}-\d{2} \d{2}:\d{2}/)[0]

        const messageEle = items.eq(i).find('.viewmessage')
        let message = ''
        if(messageEle.find('img').length > 0) {
          for(let j = 0; j < messageEle.find('img').length; j++) {
            if (messageEle.find('img').eq(j).attr('title'))
              message += ('「' + messageEle.find('img').eq(j).attr('title') + '」')
            else 
              message += `<img src=${messageEle.find('img').eq(j).attr('src')} />`
          }

          if(message && !messageEle.text().replace(/\n/g, ''))
            message += '<br />'
        }
        message += messageEle.text().replace(/\n/g, '')
        arr.push({message, username, publishTime, avatarUrl, comefrom})
      }
      if(!page)
        response.render('topic-details', {data: arr})
      else {
        if(page < pageSize)
          response.json(arr)
        else {
          response.json(arr.slice(0, 19))
        }
      }
    })
  })
})

app.get('/', (req, res) => {
  res.redirect('/city/yulin')
})

app.get('*', (req, res) => {
  if (!renderer) {
    return res.end('waiting for compilation... refresh in a moment.')
  }

  res.setHeader("Content-Type", "text/html")
  res.setHeader("Server", serverInfo)

  var s = Date.now()
  const context = { url: req.url }
  const renderStream = renderer.renderToStream(context)

  renderStream.once('data', () => {
    res.write(indexHTML.head)
  })

  renderStream.on('data', chunk => {
    res.write(chunk)
  })

  renderStream.on('end', () => {
    // embed initial store state
    if (context.initialState) {
      res.write(
        `<script>window.__INITIAL_STATE__=${
          serialize(context.initialState, { isJSON: true })
        }</script>`
      )
    }
    res.end(indexHTML.tail)
    console.log(`whole request: ${Date.now() - s}ms`)
  })

  renderStream.on('error', err => {
    if (err && err.code === '404') {
      res.status(404).end('404 | Page Not Found')
      return
    }
    // Render Error Page or Redirect
    res.status(500).end('Internal Error 500')
    console.error(`error during render : ${req.url}`)
    console.error(err)
  })
})

const port = process.env.PORT || 8080
app.listen(port, () => {
  console.log(`server started at localhost:${port}`)
})
